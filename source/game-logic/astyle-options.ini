# C++ Java-Stil auch Standard f�r .NET C#
--style=java

# Tabs sollten 4 Leerzeichen gro� sein
--indent=spaces=4
--convert-tabs

# case in switches sollte einger�ckt sein
#switch (foo) {
#    case 1:
#        a += 1;
#        break;
#
#    case 2: {
#        a += 2;
#        break;
#    }
#}
--indent-switches

# Kommentare sollten nicht mit der ersten Spalte beginnen
#void Foo() {
#// comment
#    if (isFoo)
#        bar();
#}
#
#becomes:
#
#void Foo() {
#    // comment
#    if (isFoo)
#        bar();
#}
--indent-col1-comments


#isFoo = true;
#if (isFoo) {
#    bar();
#} else {
#    anotherBar();
#}
#isBar = false;
#
#becomes:
#
#isFoo = true;
#
#if (isFoo) {
#    bar();
#} else {
#    anotherBar();
#}
#
#isBar = false;
--break-blocks

# genug Leerzeichen zwischen Operatoren
#if (foo==2)
#    a=bar((b-c)*a,d--);
#
#becomes:
#
#if (foo == 2)
#	a = bar((b - c) * a, d--);
--pad-oper

# Test: entfernte alle extra Leerzeichen zwischen den Klammern
#if ( isFoo( a, b ) )
#    bar ( a, b );
#
#becomes (with no padding option requested):
#
#if(isFoo(a, b))
#    bar(a, b);
--unpad-paren

# binde Zeiger und Referenzen an den Typen und nicht an die Variable
#char* foo1;
#char& foo2;
#
#becomes (with align-pointer=name):
#
#char *foo1;
#char &foo2;
--align-pointer=name
--align-reference=name


#do {
#    bar();
#    ++x;
#}
#while x == 1;
#
#becomes:
#
#do {
#    bar();
#    ++x;
#} while x == 1;
--attach-closing-while


##define Is_Bar(arg,a,b) \
#(Is_Foo((arg), (a)) \
#|| Is_Foo((arg), (b)))
#
#becomes:
#
##define Is_Bar(arg,a,b) \
#    (Is_Foo((arg), (a)) \
#     || Is_Foo((arg), (b)))
--indent-preproc-define


#void
#Foo(bool isFoo);
#
#becomes:
#
#void Foo(bool isFoo);
--attach-return-type
--attach-return-type-decl


#if (thisVariable1 == thatVariable1 || thisVariable2 == thatVariable2 || thisVariable3 == thatVariable3)
#    bar();
#
#becomes (with break‑after‑logical):
#
#if (thisVariable1 == thatVariable1 ||
#        thisVariable2 == thatVariable2 ||
#        thisVariable3 == thatVariable3)
#    bar();
--max-code-length=75
--break-after-logical


#if (isFoo)
#    isFoo = false;
#
#becomes:
#
#if (isFoo) {
#    isFoo = false;
#}
--add-braces


# keine .orig Backups
--suffix=none
